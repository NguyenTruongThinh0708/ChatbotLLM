import streamlit as st
import datetime
import re

st.set_page_config(page_title="ƒê·∫∑t l·ªãch kh√°m", layout="centered")
st.title("ü§ñ ƒê·∫∑t l·ªãch kh√°m B·ªánh vi·ªán Hehe")

# ---------------------------
# Session state init
# ---------------------------
if "stage" not in st.session_state:
    st.session_state.stage = "form"      # form -> confirm -> done -> canceled
if "booking" not in st.session_state:
    st.session_state.booking = None
if "email_saved" not in st.session_state:
    st.session_state.email_saved = None
if "want_contact" not in st.session_state:
    st.session_state.want_contact = False
if "cancel_reason" not in st.session_state:
    st.session_state.cancel_reason = None

# ---------------------------
# Utils
# ---------------------------

# H√†m t·∫°o time slots
# def generate_time_slots():
#     slots = []
#     start = datetime.time(5, 0)
#     end = datetime.time(17, 0)
#     current = datetime.datetime.combine(datetime.date.today(), start)
#     end_dt = datetime.datetime.combine(datetime.date.today(), end)
#     while current <= end_dt:
#         t = current.time()
#         # lo·∫°i gi·ªù ngh·ªâ tr∆∞a 11:30 - 13:00
#         if not (datetime.time(11, 30) <= t < datetime.time(13, 0)):
#             slots.append(t.strftime("%H:%M"))
#         current += datetime.timedelta(minutes=30)
#     return slots

def generate_time_slots():
    slots = []
    for hour in range(7, 19):
        start = datetime.time(hour, 0)
        end = datetime.time(hour+1, 0)
        # B·ªè c√°c khung gi·ªù n·∫±m trong kho·∫£ng 11:00‚Äì13:00
        if start >= datetime.time(11, 0) and start < datetime.time(13, 0):
            continue
        slots.append(f"{start.strftime('%H:%M')} - {end.strftime('%H:%M')}")
    return slots

time_slots = generate_time_slots()

# H√†m t·∫°o chi nh√°nh slots
def generate_location_slots():
    # C√≥ th·ªÉ m·ªü r·ªông list t·ª´ DB 
    return [
        "Th·ªß ƒê·ª©c",
        "Qu·∫≠n 1",
        "Qu·∫≠n 2",
        "Qu·∫≠n 7",
        "B√¨nh Th·∫°nh",
        "G√≤ V·∫•p",
        "T√¢n B√¨nh"
    ]

location_slots = generate_location_slots()

# H√†m t·∫°o l√Ω do h·ªßy l·ªãch slots
def generate_cancel_slots():
    # C√≥ th·ªÉ m·ªü r·ªông list t·ª´ DB 
    return [
        "",
        "C√¥ng vi·ªác ƒë·ªôt xu·∫•t",
        "V·∫•n ƒë·ªÅ t√†i ch√≠nh",
        "Tri·ªáu ch·ª©ng c·∫£i thi·ªán ho·∫∑c kh√¥ng c√≤n c·∫•p b√°ch",
        "Nh·∫ßm l·∫´n th√¥ng tin ƒë·∫∑t l·ªãch",
        "Kh√°c",
    ]

cancel_slots = generate_cancel_slots()

# H√†m ki·ªÉm tra h·ªç t√™n c√≥ h·ª£p l·ªá kh√¥ng
def is_valid_name(name: str) -> bool:
    """
    Ki·ªÉm tra h·ªç t√™n:
    - Kh√¥ng ƒë∆∞·ª£c r·ªóng
    - ƒê·ªô d√†i t·ªëi thi·ªÉu 2 k√Ω t·ª±
    - Ch·ªâ ch·ª©a ch·ªØ c√°i Unicode, kho·∫£ng tr·∫Øng, d·∫•u nh√°y ƒë∆°n, ch·∫•m v√† g·∫°ch n·ªëi
    """
    if not name or not name.strip():
        return False
    name = name.strip()
    if len(name.strip()) < 2:
        return False
    pattern = r"^[^\W\d_](?:[^\W\d_]|[ \.'-])*[^\W\d_]$"
    return re.match(pattern, name, re.UNICODE) is not None

# H√†m ki·ªÉm tra mail c√≥ ƒë√∫ng c√∫ ph√°p kh√¥ng
def is_valid_email(email: str) -> bool:
    # regex c∆° b·∫£n ki·ªÉm tra email
    pattern = r"^[\w\.-]+@[\w\.-]+\.\w+$"
    return re.match(pattern, email) is not None

# Ph·∫ßn g·ª≠i mail th√¥ng b√°o
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from email_settings import from_email_default, password_default, HOST, PORT

def send_email(to_email, from_email, password, subject, body):
    # Create server & Try to login
    server = smtplib.SMTP(HOST, PORT)
    server.starttls()
    try:
        server.login(from_email, password)
    except smtplib.SMTPAuthenticationError as e:
        print("Error! Invalid Sender Email or Password!")
        server.quit()
        return

    message = MIMEMultipart()
    message['Subject'] = subject
    message['From'] = from_email
    message['To'] = to_email

    message.attach(MIMEText(body, 'plain'))

    server.sendmail(from_email, to_email, message.as_string())
    server.quit()

def write_confirm_email(data):
    email_subject = "X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn B·ªánh vi·ªán {TenBenhVien}.
    Ch√∫ng t√¥i xin th√¥ng b√°o ƒë·∫∑t l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi th√¥ng tin chi ti·∫øt nh∆∞ sau:

    Th√¥ng tin ƒë·∫∑t l·ªãch
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Tr∆∞·ªõc khi t·ªõi kh√°m
    - Vui l√≤ng c√≥ m·∫∑t tr∆∞·ªõc √≠t nh·∫•t 15-30 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c ti·∫øp nh·∫≠n.
    - Mang theo: CMND/CCCD/H·ªô chi·∫øu, th·∫ª BHYT (n·∫øu s·ª≠ d·ª•ng), c√°c k·∫øt qu·∫£ x√©t nghi·ªám/phi·∫øu kh√°m tr∆∞·ªõc (n·∫øu c√≥).
    - N·∫øu l·ªãch kh√°m bao g·ªìm x√©t nghi·ªám y√™u c·∫ßu nh·ªãn ƒÉn ho·∫∑c chu·∫©n b·ªã ƒë·∫∑c bi·ªát, ch√∫ng t√¥i s·∫Ω c√≥ th√¥ng b√°o ri√™ng - vui l√≤ng tu√¢n th·ªß ƒë·ªÉ k·∫øt qu·∫£ ch√≠nh x√°c.
    - Thanh to√°n: h·ªó tr·ª£ ti·ªÅn m·∫∑t, th·∫ª n·ªôi ƒë·ªãa/qu·ªëc t·∫ø, v√† √°p d·ª•ng BHYT theo quy ƒë·ªãnh (n·∫øu c√≥).

    H·ªßy / ƒë·ªïi l·ªãch
    - N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªßy ho·∫∑c thay ƒë·ªïi l·ªãch, vui l√≤ng li√™n h·ªá tr∆∞·ªõc √≠t nh·∫•t 24 gi·ªù (n·∫øu c√≥ th·ªÉ) ƒë·ªÉ ch√∫ng t√¥i s·∫Øp x·∫øp.
    - ƒê·ªïi / h·ªßy qua: Hotline: {Hotline} - Email: {EmailCSKH} - Zalo/Chat: {ZaloChatLink} - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    L∆∞u √Ω chƒÉm s√≥c s·ª©c kh·ªèe & an to√†n
    - N·∫øu Qu√Ω kh√°ch c√≥ tri·ªáu ch·ª©ng nhi·ªÖm tr√πng h√¥ h·∫•p (s·ªët, ho, kh√≥ th·ªü), vui l√≤ng th√¥ng b√°o tr∆∞·ªõc ƒë·ªÉ nh√¢n vi√™n s·∫Øp x·∫øp khu v·ª±c kh√°m ph√π h·ª£p.
    - B·ªánh vi·ªán tu√¢n th·ªß c√°c quy ƒë·ªãnh an to√†n y t·∫ø; Qu√Ω kh√°ch vui l√≤ng mang kh·∫©u trang v√† tu√¢n th·ªß h∆∞·ªõng d·∫´n c·ªßa nh√¢n vi√™n.

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)

    return subject, body

def write_cancel_email(data):
    email_subject = "X√°c nh·∫≠n H·ª¶Y l·ªãch kh√°m t·∫°i B·ªánh vi·ªán {TenBenhVien} - M√£: {MaDatLich}"

    email_template = """
    K√≠nh g·ª≠i: {HoTen},

    B·ªánh vi·ªán {TenBenhVien} xin x√°c nh·∫≠n r·∫±ng l·ªãch kh√°m c·ªßa Qu√Ω kh√°ch v·ªõi th√¥ng tin sau ƒë√£ ƒë∆∞·ª£c H·ª¶Y:

    Th√¥ng tin ƒë·∫∑t l·ªãch (ƒë√£ h·ªßy):
    - M√£ ƒë·∫∑t l·ªãch: {MaDatLich}
    - H·ªç v√† t√™n: {HoTen}
    - Ng√†y: {Ngay}
    - Gi·ªù: {Gio}
    - Chi nh√°nh/ƒê·ªãa ch·ªâ: {ChiNhanh} - {DiaChi}

    Th√¥ng tin h·ªßy
    - L√Ω do (n·∫øu c√≥): {LyDoHuy}
    - Ng√†y h·ªßy: {NgayHuy}

    N·∫øu qu√Ω kh√°ch h·ªßy nh·∫ßm ho·∫∑c mu·ªën ƒë·∫∑t l·∫°i l·ªãch, vui l√≤ng li√™n h·ªá qua:
    - Hotline: {Hotline}
    - Email: {EmailCSKH}
    - Zalo/Chat: {ZaloChatLink}
    - Ho·∫∑c truy c·∫≠p ƒë∆∞·ªùng d·∫´n: {LinkDoiHuy}

    L∆∞u √Ω:
    - N·∫øu l·ªãch c√≥ y√™u c·∫ßu ho√†n/ho√£n thanh to√°n ho·∫∑c ch√≠nh s√°ch hu·ª∑ ri√™ng, nh√¢n vi√™n CSKH s·∫Ω li√™n h·ªá ƒë·ªÉ h∆∞·ªõng d·∫´n c·ª• th·ªÉ.
    - Th·ªùi gian l√†m vi·ªác CSKH: {GioLamViec}.

    N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ th√™m, xin vui l√≤ng li√™n h·ªá:
    B·ªánh vi·ªán {TenBenhVien} - Hotline: {Hotline} - Email: {EmailCSKH}
    Th·ªùi gian l√†m vi·ªác: {GioLamViec}

    M·ªôt l·∫ßn n·ªØa xin c·∫£m ∆°n Qu√Ω kh√°ch. K√≠nh ch√∫c Qu√Ω kh√°ch s·ª©c kh·ªèe v√† mong ƒë∆∞·ª£c ph·ª•c v·ª•!

    Tr√¢n tr·ªçng,
    ƒê·ªôi ng≈© ChƒÉm s√≥c Kh√°ch h√†ng
    B·ªánh vi·ªán {TenBenhVien}
    ƒê·ªãa ch·ªâ: {DiaChi} | Website: {Website}
    """

    subject = email_subject.format(**data)
    body = email_template.format(**data)

    return subject, body



# ---------------------------
# Stage: FORM - ch·ªçn ng√†y gi·ªù
# ---------------------------
if st.session_state.stage == "form":
    st.markdown("### Xin ch√†o üëã, vui l√≤ng ƒëi·ªÅn th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m:")
    with st.form("booking_form", clear_on_submit=False):
        # T√™n
        name = st.text_input(
            "H·ªç t√™n",
            value=st.session_state.get("user_name", ""),
            placeholder="Nh·∫≠p h·ªç t√™n (b·∫Øt bu·ªôc)"
        )
        # Ng√†y
        today = datetime.date.today()
        min_day = today + datetime.timedelta(days=1)
        max_day = today + datetime.timedelta(days=15)
        date = st.date_input("Ch·ªçn ng√†y kh√°m (Trong v√≤ng 2 tu·∫ßn)",  min_value=min_day, max_value=max_day)
        # Gi·ªù
        time = st.selectbox("Ch·ªçn gi·ªù kh√°m", time_slots)
        # Chi nh√°nh
        location = st.selectbox("Ch·ªçn chi nh√°nh", location_slots)
        submitted = st.form_submit_button("X√°c nh·∫≠n")

    if submitted:
        # Ki·ªÉm tra h·ªç t√™n c√≥ h·ª£p l·ªá kh√¥ng
        if not is_valid_name(name):
            st.error("‚ö†Ô∏è H·ªç t√™n kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
        else:
            # l∆∞u booking t·∫°m
            st.session_state.booking = {
                "name": name,
                "date": date,
                "time": time,
                "location": location,
                "status": "pending"  # pending -> confirmed -> canceled
            }
            st.session_state.email_saved = None
            st.session_state.stage = "contact"
            st.rerun()

# ---------------------------
# Stage: CONTACT - th√¥ng tin li√™n h·ªá
# ---------------------------
elif st.session_state.stage == "contact":
    b = st.session_state.booking
    if not b:
        # fallback quay v·ªÅ form n·∫øu kh√¥ng c√≥ booking
        st.session_state.stage = "form"
        st.rerun()

    st.markdown("### Th√¥ng tin ƒë·∫∑t l·ªãch")
    st.markdown(
        "üìÖ Th√¥ng tin l·ªãch kh√°m d·ª± ki·∫øn:\n\n"
        f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
        f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
    )
    
    # Khi mu·ªën th√™m li√™n h·ªá
    if st.session_state.want_contact:
        st.markdown("C√°ch b·∫°n mu·ªën nh·∫≠n th√¥ng b√°o:")
        col_mail, col_zalo, col_sms, col_back = st.columns(4)

        # Th√¥ng b√°o qua mail
        if col_mail.button("Email"):
            st.session_state.stage = "email"
            st.rerun()

        if col_mail.button("Zalo"):
            st.session_state.stage = "email"
            st.rerun()

        if col_mail.button("SMS"):
            st.session_state.stage = "email"
            st.rerun()

        if col_back.button("Quay l·∫°i"):
            st.session_state.stage = "contact"
            st.session_state.want_contact = False
            st.rerun()

    if not st.session_state.want_contact:
        # C√≥/Kh√¥ng mu·ªën th√™m li√™n h·ªá
        st.markdown("B·∫°n c√≥ mu·ªën **th√™m th√¥ng tin li√™n h·ªá** ƒë·ªÉ ch√∫ng t√¥i g·ª≠i th√¥ng b√°o nh·∫Øc b·∫°n khi g·∫ßn t·ªõi l·ªãch h·∫πn kh√¥ng?")
        col_yes, col_no = st.columns(2)
        if col_yes.button("C√≥"):
            st.session_state.want_contact = True
            st.rerun()

        if col_no.button("Kh√¥ng"):
            st.session_state.want_contact = False
            st.session_state.stage = "confirm"
            st.rerun()


# ---------------------------
# Stage: EMAIL - nh·∫≠p email ƒë·ªÉ nh·∫≠n th√¥ng b√°o
# ---------------------------
elif st.session_state.stage == "email":
    st.markdown("### ‚úâÔ∏è Nh·∫≠p email ƒë·ªÉ nh·∫≠n th√¥ng b√°o")
    with st.form("email_form"):
        email = st.text_input("Email nh·∫≠n th√¥ng b√°o", value=st.session_state.email_saved or "")
        submit_email = st.form_submit_button("L∆∞u email")
        cancel_email = st.form_submit_button("H·ªßy")

    if submit_email:
        if is_valid_email(email):
            st.session_state.email_saved = email
            st.success(f"ƒê√£ l∆∞u: {email}. Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng b√°o nh·∫Øc tr∆∞·ªõc.")
            # quay l·∫°i trang done ƒë·ªÉ hi·ªÉn th·ªã l·ª±a ch·ªçn kh√°c
            st.session_state.stage = "confirm"
            st.rerun()
        else:
            st.error("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

    if cancel_email:
        st.session_state.stage = "contact"
        st.rerun()

# ---------------------------
# Stage: CONFIRM - x√°c nh·∫≠n c√≥/kh√¥ng
# ---------------------------
elif st.session_state.stage == "confirm":
    b = st.session_state.booking
    if not b:
        # fallback quay v·ªÅ form n·∫øu kh√¥ng c√≥ booking
        st.session_state.stage = "form"
        st.rerun()

    st.markdown("### X√°c nh·∫≠n ƒë·∫∑t l·ªãch")
    st.markdown(
        "Th√¥ng tin l·ªãch h·∫πn kh√°m d·ª± ki·∫øn c·ªßa b·∫°n:\n\n"
        f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
        f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
        f"**Th√¥ng b√°o s·∫Ω g·ª≠i qua email:** {st.session_state.email_saved}\n\n"
        "H√£y x√°c nh·∫≠n th√¥ng tin tr√™n c√≥ ch√≠nh x√°c kh√¥ng? N·∫øu c√≥ sai s√≥t b·∫°n h√£y ch·ªçn 'Thay ƒë·ªïi' nh√©!"
    )

    col_yes, col_no = st.columns(2)
    if col_yes.button("X√°c nh·∫≠n"):
        st.session_state.booking["status"] = "confirmed"
        st.session_state.stage = "done"
        st.rerun()

    if col_no.button("Thay ƒë·ªïi"):
        # ƒë∆∞a v·ªÅ l·∫°i b∆∞·ªõc 1 (form). x√≥a booking t·∫°m
        st.session_state.booking = None
        st.session_state.stage = "form"
        st.rerun()

# ---------------------------
# Stage: DONE - ƒë√£ x√°c nh·∫≠n -> ch·ªçn h√†nh ƒë·ªông (mail / h·ªßy / ƒë·ªïi)
# ---------------------------
elif st.session_state.stage == "done":
    b = st.session_state.booking
    st.markdown("### ‚úÖ L·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n")
    if st.session_state.email_saved == None:
        st.markdown(
            "**ƒê√£ x√°c nh·∫≠n** l·ªãch h·∫πn kh√°m c·ªßa b·∫°n:\n\n"
            f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
            f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
            "Vui l√≤ng **ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 15 t·ªõi 30 ph√∫t** ƒë·ªÉ l√†m th·ªß t·ª•c b·∫°n nh√©!\n\n"
            "Quy tr√¨nh ƒë·∫∑t l·ªãch kh√°m ƒë√£ ho√†n t·∫•t, b·∫°n c√≥ th·ªÉ an t√¢m ƒë·∫øn kh√°m üòä"
        )
    else:
        st.markdown(
            "**ƒê√£ x√°c nh·∫≠n** l·ªãch h·∫πn kh√°m c·ªßa b·∫°n:\n\n"
            f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
            f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
            f"**Th√¥ng b√°o s·∫Ω g·ª≠i qua email:** {st.session_state.email_saved}\n\n"
            f"Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng b√°o nh·∫Øc b·∫°n tr∆∞·ªõc 1 ng√†y qua k√™nh li√™n l·∫°c ·ªü tr√™n.\n\n"
            "Vui l√≤ng **ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 15 t·ªõi 30 ph√∫t** ƒë·ªÉ l√†m th·ªß t·ª•c b·∫°n nh√©!\n\n"
            "Quy tr√¨nh ƒë·∫∑t l·ªãch kh√°m ƒë√£ ho√†n t·∫•t, b·∫°n c√≥ th·ªÉ an t√¢m ƒë·∫øn kh√°m üòä"
        )

    data = {
        "TenBenhVien": "Hehe",
        "MaDatLich": f"HEHE-{b['date'].strftime('%Y%m%d')}-00001",
        "HoTen": f"{b['name']}",
        "Ngay": f"{b['date'].strftime('%d/%m/%Y')}",
        "Gio": f"{b['time']}",
        "ChiNhanh": f"{b['location']}",
        "DiaChi": "123 ƒê∆∞·ªùng ABC, Qu·∫≠n Th·ªß ƒê·ª©c, TP.HCM",
        "Hotline": "1900 1234",
        "EmailCSKH": "cskh@bvhehe.vn",
        "ZaloChatLink": "https://zalo.me/19001234",
        "LinkDoiHuy": "https://benhvienhehe.vn/doi-huy",
        "GioLamViec": "07:00 - 19:00 (Th·ª© 2 - CN)",
        "Website": "https://benhvienhehe.vn"
    }

    subject, body = write_confirm_email(data)
    send_email(st.session_state.email_saved, from_email_default, password_default, subject, body)

    # st.markdown("B·∫°n mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†o ti·∫øp theo?")
    col_change, col_cancel = st.columns(2)

    # ƒê·ªïi l·ªãch
    if col_change.button("ƒê·ªïi l·ªãch h·∫πn"):
        # quay v·ªÅ b∆∞·ªõc 1 ƒë·ªÉ ch·ªçn l·∫°i (x√≥a booking hi·ªán t·∫°i ho·∫∑c gi·ªØ t·∫°m tu·ª≥ b·∫°n; ·ªü ƒë√¢y ta x√≥a)
        st.session_state.booking = None
        st.session_state.stage = "form"
        st.rerun()

    # H·ªßy l·ªãch
    if col_cancel.button("H·ªßy l·ªãch h·∫πn"):
        st.session_state.booking["status"] = "cancelling"
        st.session_state.stage = "cancelling"
        st.rerun()


# ---------------------------
# Stage: CANCELLING - X√°c nh·∫≠n h·ªßy
# ---------------------------
elif st.session_state.stage == "cancelling":
    b = st.session_state.booking or {}
    st.markdown("### X√°c nh·∫≠n H·ª¶Y l·ªãch kh√°m")
    if b:
        st.markdown(
            "Th√¥ng tin l·ªãch h·∫πn kh√°m ƒë√£ ƒë·∫∑t c·ªßa b·∫°n:\n\n"
            f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
            f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
            f"**Th√¥ng b√°o s·∫Ω g·ª≠i qua email:** {st.session_state.email_saved}\n\n"
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch kh√¥ng? N·∫øu ƒë∆∞·ª£c, b·∫°n c√≥ th·ªÉ cho ch√∫ng t√¥i bi·∫øt l√Ω do h·ªßy l·ªãch ƒë∆∞·ª£c kh√¥ng?"
        )
    else:
        st.markdown("L·ªãch tr∆∞·ªõc ƒë√≥ ƒë√£ b·ªã hu·ª∑.")
    
    reason_select = st.selectbox("L√Ω do h·ªßy l·ªãch kh√°m", cancel_slots)
    reason_other = ""
    if reason_select == "Kh√°c":
        reason_other = st.text_input(
            "Vui l√≤ng ghi r√µ l√Ω do kh√°c",
            placeholder="Nh·∫≠p l√Ω do c·ª• th·ªÉ..."
        )

    col_yes, col_no = st.columns(2)

    # H·ªßy l·ªãch
    if col_yes.button("H·ªßy l·ªãch"):
        # Ki·ªÉm tra h·ª£p l·ªá: n·∫øu ch·ªçn Kh√°c th√¨ ph·∫£i nh·∫≠p l√Ω do
        if reason_select == "Kh√°c" and (not reason_other or reason_other.strip() == ""):
            st.error("Vui l√≤ng nh·∫≠p l√Ω do h·ªßy chi ti·∫øt khi ch·ªçn 'Kh√°c'.")
        else:
            # Chu·∫©n ho√°
            reason_final = reason_other.strip() if reason_select == "Kh√°c" else reason_select

            # L∆∞u th√¥ng tin hu·ª∑
            st.session_state.cancel_reason = reason_final
            st.session_state.booking["status"] = "canceled"
            st.session_state.stage = "canceled"
            st.rerun()

    # Quay l·∫°i
    if col_no.button("Quay l·∫°i"):
        st.session_state.stage = "done"
        st.rerun()

# ---------------------------
# Stage: CANCELED - hi·ªÉn th·ªã ƒë√£ h·ªßy
# ---------------------------
elif st.session_state.stage == "canceled":
    b = st.session_state.booking or {}
    st.markdown("### ‚úñÔ∏è L·ªãch c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy")
    if b:
        st.markdown(
            "Th√¥ng tin l·ªãch h·∫πn kh√°m ƒë√£ H·ª¶Y c·ªßa b·∫°n:\n\n"
            f"**Ng√†y kh√°m:** {b['date'].strftime('%d/%m/%Y')} l√∫c {b['time']}\n\n"
            f"**ƒê·ªãa ƒëi·ªÉm:** B·ªánh vi·ªán Hehe chi nh√°nh {b['location']}\n\n"
            f"**Th√¥ng b√°o s·∫Ω g·ª≠i qua email:** {st.session_state.email_saved}\n\n"
            "Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng tin x√°c nh·∫≠n h·ªßy l·ªãch qua th√¥ng tin li√™n h·ªá tr√™n."
        )
    else:
        st.markdown("L·ªãch tr∆∞·ªõc ƒë√≥ ƒë√£ b·ªã hu·ª∑.")

    data = {
        "TenBenhVien": "Hehe",
        "MaDatLich": f"HEHE-{b['date'].strftime('%Y%m%d')}-00001",
        "LyDoHuy": f"{st.session_state.cancel_reason}",
        "NgayHuy": f"{datetime.datetime.now()}",
        "HoTen": f"{b['name']}",
        "Ngay": f"{b['date'].strftime('%d/%m/%Y')}",
        "Gio": f"{b['time']}",
        "ChiNhanh": f"{b['location']}",
        "DiaChi": "123 ƒê∆∞·ªùng ABC, Qu·∫≠n Th·ªß ƒê·ª©c, TP.HCM",
        "Hotline": "1900 1234",
        "EmailCSKH": "cskh@bvhehe.vn",
        "ZaloChatLink": "https://zalo.me/19001234",
        "LinkDoiHuy": "https://benhvienhehe.vn/doi-huy",
        "GioLamViec": "07:00 - 19:00 (Th·ª© 2 - CN)",
        "Website": "https://benhvienhehe.vn"
    }

    subject, body = write_cancel_email(data)
    send_email(st.session_state.email_saved, from_email_default, password_default, subject, body)
    
    # Cung c·∫•p n√∫t ƒë·ªÉ ƒë·∫∑t l·ªãch m·ªõi
    if st.button("ƒê·∫∑t l·ªãch m·ªõi"):
        st.session_state.booking = None
        st.session_state.stage = "form"
        st.rerun()


# ---------------------------
# (Optional) Small status panel (lu√¥n hi·ªÉn th·ªã)
# ---------------------------
st.divider()
st.markdown("#### Tr·∫°ng th√°i hi·ªán t·∫°i (debug):")
st.write({
    "stage": st.session_state.stage,
    "booking": {
        k: (v.strftime("%d/%m/%Y") if isinstance(v, datetime.date) else v)
        for k, v in (st.session_state.booking or {}).items()
    },
    "email_saved": st.session_state.email_saved
})
