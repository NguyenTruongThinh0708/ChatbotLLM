import streamlit as st
import datetime
import os
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# ===== Load .env ƒë·ªÉ l·∫•y th√¥ng tin g·ª≠i mail =====
load_dotenv()
SENDER_EMAIL = os.getenv("SENDER_EMAIL")
EMAIL_APP_PASSWORD = os.getenv("EMAIL_APP_PASSWORD")

# ===== H√†m g·ª≠i mail x√°c nh·∫≠n =====
def send_confirmation_email(to_email, name, date, time, package):
    subject = "X√°c nh·∫≠n l·ªãch kh√°m c·ªßa b·∫°n"
    body = f"""
    Xin ch√†o {name},

    B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v√†o ng√†y {date} l√∫c {time} 
    cho g√≥i kh√°m: {package}.

    Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù h·∫πn. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.

    Tr√¢n tr·ªçng,
    Ph√≤ng kh√°m
    """

    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(SENDER_EMAIL, EMAIL_APP_PASSWORD)
            server.send_message(msg)
        return True
    except Exception as e:
        print("Error sending email:", e)
        return False


# ===== H√†m t·∫°o c√°c khung gi·ªù 30 ph√∫t (5h - 17h, ngh·ªâ tr∆∞a 11h30-13h) =====
def generate_time_slots():
    slots = []
    start = datetime.time(5, 0)
    end = datetime.time(17, 0)
    current = datetime.datetime.combine(datetime.date.today(), start)
    end_dt = datetime.datetime.combine(datetime.date.today(), end)
    while current < end_dt:
        t = current.time()
        next_t = (current + datetime.timedelta(minutes=60)).time()
        if not (datetime.time(11,30) <= t < datetime.time(13,0)):
            slots.append(f"{t.strftime('%H:%M')} - {next_t.strftime('%H:%M')}")
        current += datetime.timedelta(minutes=60)
    return slots

time_slots = generate_time_slots()

# ===== C·∫•u h√¨nh giao di·ªán =====
st.set_page_config(page_title="Chatbot ƒê·∫∑t l·ªãch kh√°m", page_icon="ü§ñ")
st.title("ü§ñ Chatbot ƒê·∫∑t l·ªãch kh√°m")

# ===== Qu·∫£n l√Ω tr·∫°ng th√°i h·ªôi tho·∫°i =====
if "messages" not in st.session_state:
    st.session_state.messages = []
    st.session_state.step = "form"
    st.session_state.form_data = {}

# ===== Hi·ªÉn th·ªã h·ªôi tho·∫°i c≈© =====
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])


# ===== GIAI ƒêO·∫†N 1: FORM ƒê·∫∂T L·ªäCH =====
if st.session_state.step == "form":
    with st.chat_message("assistant"):
        st.write("üìã M·ªùi b·∫°n nh·∫≠p th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m:")

        today = datetime.date.today()
        min_date = today + datetime.timedelta(days=1)
        max_date = today + datetime.timedelta(days=15)

        with st.form("booking_form"):
            name = st.text_input("H·ªç t√™n")
            email = st.text_input("Email")
            date = st.date_input("Ng√†y kh√°m", min_value=min_date, max_value=max_date)
            time = st.selectbox("Gi·ªù kh√°m", time_slots)
            package = st.selectbox("G√≥i kh√°m", ["T·ªïng qu√°t", "Tim m·∫°ch", "Tai m≈©i h·ªçng", "RƒÉng h√†m m·∫∑t"])
            submitted = st.form_submit_button("G·ª≠i th√¥ng tin")

        if submitted:
            st.session_state.form_data = {
                "name": name,
                "email": email,
                "date": date,
                "time": time,
                "package": package
            }
            st.session_state.messages.append({
                "role": "assistant",
                "content": f"üìù B·∫°n ƒë√£ ch·ªçn:\n- **H·ªç t√™n**: {name}\n- **Email**: {email}\n- **Ng√†y**: {date.strftime('%d/%m/%Y')}\n- **Gi·ªù**: {time}\n- **G√≥i kh√°m**: {package}\n\nB·∫°n c√≥ mu·ªën x√°c nh·∫≠n l·ªãch h·∫πn n√†y kh√¥ng?"
            })
            st.session_state.step = "confirm"
            st.rerun()


# ===== GIAI ƒêO·∫†N 2: X√ÅC NH·∫¨N L·ªäCH =====
elif st.session_state.step == "confirm":
    with st.chat_message("assistant"):
        col1, col2 = st.columns(2)
        if col1.button("‚úÖ Yes"):
            # G·ª≠i mail x√°c nh·∫≠n
            data = st.session_state.form_data
            send_confirmation_email(data["email"], data["name"], data["date"].strftime('%d/%m/%Y'), data["time"], data["package"])

            st.session_state.messages.append({
                "role": "assistant",
                "content": f"‚úÖ B·∫°n ƒë√£ ƒë·∫∑t l·ªãch v√†o ng√†y **{data['date'].strftime('%d/%m/%Y')}** l√∫c **{data['time']}** cho g√≥i **{data['package']}**.\n\nB·∫°n c√≥ th·ªÉ ch·ªçn **Cancel** ƒë·ªÉ h·ªßy ho·∫∑c **Reschedule** ƒë·ªÉ ƒë·∫∑t l·∫°i l·ªãch."
            })
            st.session_state.step = "final"
            st.rerun()
        if col2.button("‚ùå No"):
            st.session_state.messages.append({"role": "assistant", "content": "‚ùå ƒê√£ h·ªßy th√¥ng tin, vui l√≤ng nh·∫≠p l·∫°i."})
            st.session_state.step = "form"
            st.rerun()


# ===== GIAI ƒêO·∫†N 3: SAU KHI ƒê√É X√ÅC NH·∫¨N =====
elif st.session_state.step == "final":
    with st.chat_message("assistant"):
        col1, col2 = st.columns(2)
        if col1.button("üõë Cancel"):
            st.session_state.messages.append({"role": "assistant", "content": "üõë L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy."})
            st.session_state.step = "form"
            st.rerun()
        if col2.button("üîÅ Reschedule"):
            st.session_state.messages.append({"role": "assistant", "content": "üîÅ Vui l√≤ng nh·∫≠p l·∫°i th√¥ng tin ƒë·ªÉ ƒë·ªïi l·ªãch."})
            st.session_state.step = "form"
            st.rerun()
